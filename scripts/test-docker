#!/bin/bash
declare -A test_docker_versions
declare -A docker_versions_passed
declare -A docker_versions_failed

FAIL="false"

cd $(dirname $0)

echo "==> Waiting for Docker daemon to be started"
while true; do
  docker version &>/dev/null && break
  sleep 5
done


test_docker_versions["ubuntu:22.04"]="^23.0.([4-9]|[1-9]\d)$|^24.0|^25.0|^26.0|^26.1|^27.0|^27.1|^28.0|^28.1|^28.2|^28.3"
test_docker_versions["ubuntu:24.04"]="^26.0|^26.1|^27.0|^27.1|^28.0|^28.1|^28.2|^28.3"
test_docker_versions["quay.io/centos/centos:stream9"]="^24.0|^25.0|^26.0|^26.1|^27.0|^27.1|^28.0|^28.1|^28.2|^28.3"
test_docker_versions["oraclelinux:8"]="^23.0.([4-9]|[1-9]\d)$|^24.0|^25.0|^26.0|^26.1|^27.0|^27.1|^28.0|^28.1|^28.2|^28.3"
test_docker_versions["oraclelinux:9"]="^23.0.([4-9]|[1-9]\d)$|^24.0|^25.0|^26.0|^26.1|^27.0|^27.1|^28.0|^28.1|^28.2|^28.3"
test_docker_versions["rockylinux:8"]="^23.0.([4-9]|[1-9]\d)$|^24.0|^25.0|^26.0|^26.1|^27.0|^27.1|^28.0|^28.1|^28.2|^28.3"
test_docker_versions["rockylinux:9"]="^23.0.([4-9]|[1-9]\d)$|^24.0|^25.0|^26.0|^26.1|^27.0|^27.1|^28.0|^28.1|^28.2|^28.3"
test_docker_versions["redhat/ubi8:8.9"]="^23.0.([4-9]|[1-9]\d)$|^24.0|^25.0|^26.0|^26.1|^27.0|^27.1|^28.0|^28.1|^28.2|^28.3"
test_docker_versions["redhat/ubi9:9.4"]="^23.0.([4-9]|[1-9]\d)$|^24.0|^25.0|^26.0|^26.1|^27.0|^27.1|^28.0|^28.1|^28.2|^28.3"

echo "==> Testing install-docker scripts..."
for DOCKER_VERSION_SCRIPT in $(find ../dist/ -mindepth 1 -type f -exec basename {} \; | sort -V); do
	DOCKER_VERSION=$(echo $DOCKER_VERSION_SCRIPT | sed 's/\.sh//')
  echo "==> Found $DOCKER_VERSION_SCRIPT"
  unset TEST_OS_IMAGE_NAME
  unset TEST_OS_IMAGE_TAG
	if [ -f ../dist/$DOCKER_VERSION_SCRIPT ] ; then
		if [ -f ../pkg/$DOCKER_VERSION/config.sh ]; then
			source ../pkg/$DOCKER_VERSION/config.sh
		fi
		if [ -z "${TEST_OS_IMAGE_NAME}" ] && [ -z "${TEST_OS_IMAGE_TAG}" ]; then
			TEST_OS_IMAGE_NAME=(oraclelinux ubuntu rockylinux redhat/ubi9 quay.io/centos/centos redhat/ubi8)
			TEST_OS_IMAGE_TAG[0]="8 9"
			TEST_OS_IMAGE_TAG[1]="22.04 24.04"
			TEST_OS_IMAGE_TAG[2]="8 9"
			TEST_OS_IMAGE_TAG[3]="9.4"
			TEST_OS_IMAGE_TAG[4]="stream9"
			TEST_OS_IMAGE_TAG[5]="8.9"
		elif [ -z "${TEST_OS_IMAGE_NAME}" ] || [ -z "${TEST_OS_IMAGE_TAG}" ]; then
		  echo "Both TEST_OS_IMAGE_NAME and TEST_OS_IMAGE_TAG must be set for ${DOCKER_VERSION}"
		fi
		for (( index=0; index<${#TEST_OS_IMAGE_NAME[@]}; index++ )); do
			IMAGE=${TEST_OS_IMAGE_NAME[$index]}
			for TAG in ${TEST_OS_IMAGE_TAG[$index]}; do
				DOCKER_REGEX=${test_docker_versions["${IMAGE}:${TAG}"]}
				if [[ "x${DOCKER_REGEX}" != "x" ]]; then
					DOCKER_REGEX_RESULT=$(echo $DOCKER_VERSION | grep -E $DOCKER_REGEX)
					if [[ "x${DOCKER_REGEX_RESULT}" == "x" ]]; then
						echo "==> Skipping ${DOCKER_VERSION} for ${IMAGE}:${TAG}"
						continue
					fi
				fi
				echo "==> Testing $DOCKER_VERSION at ${IMAGE}:${TAG}..."
				COMMAND="echo '' > /usr/bin/systemctl && bash /install.sh && bash -c 'if [[ \"\$(docker version --format '{{.Client.Version}}') 2>/dev/null\" != ${DOCKER_VERSION}* ]]; then echo \"Found  version (\$(docker version --format '{{.Client.Version}}')) does not match \"${DOCKER_VERSION}\"\"; exit 1; fi'"
				# Patch for oracle linux 8 docker image as yum is not installed
				if [ "$IMAGE" == "oraclelinux" ] && [ "$TAG" == "8" ]; then
					COMMAND="echo '' > /usr/bin/systemctl && dnf install -y yum && bash /install.sh && bash -c 'if [[ \"\$(docker version --format '{{.Client.Version}}') 2>/dev/null\" != ${DOCKER_VERSION}* ]]; then echo \"Found  version (\$(docker version --format '{{.Client.Version}}')) does not match \"${DOCKER_VERSION}\"\"; exit 1; fi'"
				fi
				docker run -d --privileged \
                                        --label install-docker="true" \
                                        --label install-docker-image="${IMAGE}" \
                                        --label install-docker-tag="${TAG}" \
                                        --label install-docker-version="${DOCKER_VERSION}" \
					-v /install-docker/dist/$DOCKER_VERSION_SCRIPT:/install.sh \
					-v /pkgcache-yum/${IMAGE}-${TAG}/:/var/cache/yum \
					-v /pkgcache-dnf/${IMAGE}-${TAG}/:/var/cache/dnf \
					-v /pkgcache-apt/${IMAGE}-${TAG}/:/var/cache/apt \
					-e DIND_TEST=true \
					${IMAGE}:${TAG} \
					sh -c "${COMMAND}"
			done
		done
		echo "==> Waiting for all tests for Docker version ${DOCKER_VERSION} are complete"
		while true; do
			RUNNINGCONTAINERS=$(docker ps -q --filter "label=install-docker")
			if [[ "x${RUNNINGCONTAINERS}" == "x" ]]; then
				break
			fi
			echo "==> Still running for ${DOCKER_VERSION}: $(echo "${RUNNINGCONTAINERS}")"
			echo "==> Sleeping 15 seconds to check tests for Docker version ${DOCKER_VERSION}"
			sleep 15
		done
		# Gathering all containers to save exit code
		ALLEXITEDCONTAINERS=$(docker ps -qa --filter "label=install-docker-version=${DOCKER_VERSION}")
		for CONTAINER in $ALLEXITEDCONTAINERS; do
			EXITCODE=$(docker inspect $CONTAINER --format='{{.State.ExitCode}}')
			IMAGE=$(docker inspect $CONTAINER --format='{{ index .Config.Labels "install-docker-image" }}')
			TAG=$(docker inspect $CONTAINER --format='{{ index .Config.Labels "install-docker-tag" }}')
			DOCKER_VERSION=$(docker inspect $CONTAINER --format='{{ index .Config.Labels "install-docker-version" }}')
			echo "${IMAGE}:${TAG}-${DOCKER_VERSION} exit code $EXITCODE"
			if [ $EXITCODE -eq 0 ]; then
				docker_versions_passed["${IMAGE}:${TAG}-${DOCKER_VERSION}"]="$EXITCODE"
			else
				FAIL="true"
				docker_versions_failed["${IMAGE}:${TAG}-${DOCKER_VERSION}"]="$EXITCODE"
				echo "Showing logs for ${IMAGE}:${TAG}-${DOCKER_VERSION}"
				docker logs --tail=10 $CONTAINER
			fi
			echo "==> Cleaning up container ${CONTAINER}"
			docker rm -f $CONTAINER
		done
		unset TEST_OS_DISTRO_IMAGE TEST_OS_IMAGE_TAG
	fi
done

echo ""
echo "---- TEST RESULTS ----"
for result in "${!docker_versions_passed[@]}"; do
	echo "[PASS] ${result} exit code: ${docker_versions_passed[$result]}"
done

if [[ "${FAIL}" == "true" ]]; then
	for result in "${!docker_versions_failed[@]}"; do
		echo "[FAIL] ${result} exit code: ${docker_versions_failed[${result}]}"
	done
	exit 1
fi
